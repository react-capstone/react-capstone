{"version":3,"sources":["components/Instructions/LandingLayOut/LandingLayOut.js","pages/Landing/Landing.js","components/Summary/Summary.js","components/Hint/Hint.js","components/Question/Question.js","pages/Game/Game.js","components/NoMatch/NoMatch.js","App.js","reportWebVitals.js","index.js"],"names":["LandingLayOut","handleChange","event","props","handleNameChange","target","value","playerName","this","Jumbotron","className","for","onChange","type","name","required","to","Button","Component","Landing","Summary","handleClick","window","location","reload","status","triviaQuestions","userAnswers","points","finalResults","map","userAnswer","i","user","correct","correct_answer","question","summary","result","index","dangerouslySetInnerHTML","__html","console","log","winOrLost","onClick","variant","Hint","state","gifImage","answer","currentQuestion","fetch","process","then","res","json","info","setState","data","images","original","url","catch","error","Image","src","alt","width","Question","currentAnswer","hint","calculatePoints","difficulty","handleHint","handleSubmit","preventDefault","handleNextQuestion","currentQuestionNumber","answers","push","pointsAdd","toLowerCase","currentState","allAnswersMapped","length","size","category","Form","onSubmit","Group","controlId","Label","Control","placeholder","Text","Game","nextQuestion","allAnswers","incorrect_answers","randomPosition","Math","floor","random","splice","NoMatch","pathname","App","questions","results","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d02439a5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Jumbotron } from \"react-bootstrap\";\nimport \"./LandingLayOut.css\";\nimport { Link } from \"react-router-dom\";\n\nclass LandingLayOut extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     playerName: \"\",\n  //   };\n  // }\n\n  handleChange = (event) => {\n    this.props.handleNameChange(event.target.value);\n  };\n\n  render() {\n    const { playerName } = this.props;\n    // console.log(this.state.playerName);\n    return (\n      <Jumbotron className=\"border jumbo\">\n        {/* <h1>{this.props.playerName}</h1> */}\n        <div className=\"landingPage\">\n          <h1 className=\"title\">Trivia Time</h1>\n          <h3 className=\"instructionsTitle\">Instructions</h3>\n          <span className=\"instructionsPara\">\n            -1000 points wins the game.\n            <br />\n            -Each round has up to 15 questions.\n            <br />\n            -Easy questions are worth 100 points.\n            <br />\n            -Medium questions are worth 200 points.\n            <br />\n            -Hard questions are worth 300 points.\n            <br />\n            -Hints cost 50 points and display a helpful GIF.\n            <br />\n            -If you have not scored 1000 points after question 15, you lose the\n            game.\n            <br />\n          </span>\n          <form>\n            <label className=\"playerName\" for=\"playerName\">\n              Player Name:{\" \"}\n            </label>\n            <input\n              className=\"nameField\"\n              onChange={this.handleChange}\n              type=\"text\"\n              name=\"name\"\n              value={playerName}\n              required\n            />\n          </form>\n\n          <Link to=\"/game\">\n            <Button>START</Button>\n          </Link>\n        </div>\n      </Jumbotron>\n    );\n  }\n}\n\nexport default LandingLayOut;\n","import React, { Component } from \"react\";\nimport LandingLayOut from \"../../components/Instructions/LandingLayOut/LandingLayOut\";\n// import Instructions from \"../../components/Instructions/Instructions\";\n\nclass Landing extends Component {\n  render() {\n    const { handleNameChange, playerName } = this.props;\n    return (\n      <div>\n        <LandingLayOut\n          handleNameChange={handleNameChange}\n          playerName={playerName}\n        />\n        {/* <Instructions /> */}\n      </div>\n    );\n  }\n}\n\nexport default Landing;\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"./Summary.css\";\nimport { Link } from \"react-router-dom\";\nclass Summary extends Component {\n  handleClick = (event) => {\n    window.location.reload(false);\n  };\n  render() {\n    const { status, triviaQuestions, userAnswers, points, playerName } =\n      this.props;\n    let finalResults = userAnswers.map((userAnswer, i) => {\n      return {\n        user: userAnswer,\n        correct: triviaQuestions[i].correct_answer,\n        question: triviaQuestions[i].question,\n      };\n    });\n    const summary = finalResults.map((result, index) => {\n      return (\n        <div className=\"result text-left\">\n          <li>\n            <p\n              dangerouslySetInnerHTML={{\n                __html: `Question ${index + 1}: ${result.question}`,\n              }}\n            ></p>\n            <p>\n              Your Answer:{\" \"}\n              {result.user === \"\" ? (\n                <span className=\"noAnswer\">No Answer Given</span>\n              ) : (\n                result.user\n              )}\n            </p>\n            <p\n              dangerouslySetInnerHTML={{\n                __html: `Correct Answer: ${result.correct}`,\n              }}\n            ></p>\n          </li>\n        </div>\n      );\n    });\n    console.log(\"finalResults\", finalResults);\n    const winOrLost = status ? \"win\" : \"lost\";\n    return (\n      <div className=\"summary-container text-center\">\n        <h1>Thanks for playing {playerName}!</h1>\n        <h3>Here is how you did :)</h3>\n        {status ? (\n          <h2 className={winOrLost}>You have won the game!</h2>\n        ) : (\n          <h2 className={winOrLost}>Better luck next time!</h2>\n        )}\n        <div className=\"points\">Total points: {points}</div>\n        <ul>{summary}</ul>\n        <Link to=\"/game\">\n          <Button onClick={this.handleClick}>Start Over</Button>\n        </Link>\n        <Link to=\"/\">\n          <Button variant=\"danger\">New Player, Same Questions</Button>\n        </Link>\n      </div>\n    );\n  }\n}\nexport default Summary;\n","import React, { Component } from \"react\";\nimport { Image } from \"react-bootstrap\";\n\nclass Hint extends Component {\n  state = {\n    gifImage: \"\",\n  };\n  componentDidMount() {\n    const API_KEY = process.env.REACT_APP_GIPHY_API_KEY;\n    const answer = this.props.currentQuestion.correct_answer;\n    fetch(\n      `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${answer}&limit=1&offset=0&rating=g&lang=en`\n    )\n      .then((res) => res.json())\n      .then((info) => {\n        console.log(\"gif data\", info);\n        this.setState({\n          gifImage: info.data[0].images.original.url,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    const { gifImage } = this.state;\n    return (\n      <>\n        <Image src={gifImage} alt=\"gifImage\" width=\"250\" />\n      </>\n    );\n  }\n}\n\nexport default Hint;\n","import React, { Component } from \"react\";\nimport { Button, Form, Jumbotron } from \"react-bootstrap\";\nimport \"./Question.css\";\nimport Summary from \"../Summary/Summary\";\nimport Hint from \"../Hint/Hint\";\nimport { House } from \"react-bootstrap-icons\";\nimport { Link } from \"react-router-dom\";\n\nclass Question extends Component {\n  state = {\n    points: 0,\n    userAnswers: [],\n    currentAnswer: \"\",\n    hint: false,\n    // currentQuestionNumber: 0,\n  };\n\n  calculatePoints = (question) => {\n    if (question.difficulty === \"easy\") {\n      return 100;\n    } else if (question.difficulty === \"medium\") {\n      return 200;\n    } else {\n      return 300;\n    }\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      currentAnswer: event.target.value,\n    });\n  };\n\n  handleHint = () => {\n    this.setState({\n      hint: true,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.handleNextQuestion();\n    const { userAnswers, currentAnswer, hint } = this.state;\n    const { currentQuestionNumber } = this.props;\n    //push currentAnswer into userAnswers and set that as userAnswers state\n    const answers = userAnswers.push(currentAnswer);\n    const currentQuestion = this.props.triviaQuestions[currentQuestionNumber];\n\n    let pointsAdd = 0;\n\n    if (\n      currentAnswer.toLowerCase() ===\n      currentQuestion.correct_answer.toLowerCase()\n    ) {\n      pointsAdd = this.calculatePoints(currentQuestion);\n    }\n\n    hint ? (pointsAdd -= 50) : (pointsAdd += 0);\n    this.setState((currentState) => {\n      console.log(\"currentState\", currentState);\n      // this.props.currentQuestionNumber + 1;\n      // this.props.handleNextQuestion();\n      return {\n        userAnswer: answers,\n        // currentQuestionNumber: currentState.currentQuestionNumber + 1,\n        points: currentState.points + pointsAdd,\n        currentAnswer: \"\",\n        hint: false,\n      };\n    });\n  };\n  render() {\n    const {\n      triviaQuestions,\n      playerName,\n      currentQuestionNumber,\n      allAnswersMapped,\n    } = this.props;\n    const { userAnswers, points, hint } = this.state;\n    const currentQuestion = triviaQuestions[currentQuestionNumber];\n    // console.log(\"currentQuestionNumber\", currentQuestionNumber);\n    // console.log(hint);\n    // console.log(\"currentQuestion\", currentQuestion);\n    // let allAnswers;\n    // let allAnswersMapped;\n\n    // if (currentQuestion) {\n    //   let randomNum = Math.random() * 4;\n    //   allAnswers = [...currentQuestion.incorrect_answers];\n    //   allAnswers.splice(randomNum, 0, currentQuestion.correct_answer);\n    //   allAnswersMapped = allAnswers.map((answer) => (\n    //     <span\n    //       key={answer}\n    //       dangerouslySetInnerHTML={{\n    //         __html: answer + \", \",\n    //       }}\n    //     ></span>\n    //   ));\n    // }\n\n    // console.log(this.props.triviaQuestions);\n    return (\n      <>\n        {points < 100 && currentQuestionNumber === triviaQuestions.length ? (\n          <h1>\n            <Summary\n              status={false}\n              triviaQuestions={triviaQuestions}\n              userAnswers={userAnswers}\n              points={points}\n              playerName={playerName}\n            />\n          </h1>\n        ) : (\n          <></>\n        )}\n        {currentQuestion && (\n          <Jumbotron className=\"jumbo\">\n            <div className=\"text-center\">\n              {\" \"}\n              <Link to=\"/\">\n                <House size={50} />\n              </Link>\n            </div>\n\n            <hr />\n\n            {points < 100 ? (\n              <>\n                <p className=\"text-center\">\n                  Current Points for {playerName}: {points}\n                </p>\n\n                <h3>\n                  <i className=\"category\">Category: </i>\"\n                  {currentQuestion.category}\"{\" \"}\n                </h3>\n                <hr />\n                <h3\n                  dangerouslySetInnerHTML={{\n                    __html:\n                      \"<i className='question'>Question: </i>\" +\n                      currentQuestion.question,\n                  }}\n                >\n                  {/* Question: {currentQuestion.question} */}\n                </h3>\n                <Form onSubmit={this.handleSubmit}>\n                  <Form.Group controlId=\"formBasicInput\">\n                    <Form.Label></Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Enter answer\"\n                      value={this.state.currentAnswer}\n                      onChange={this.handleChange}\n                    />\n                    <Form.Text className=\"text-muted worth\">\n                      This question is worth:{\" \"}\n                      {this.calculatePoints(currentQuestion)} points\n                    </Form.Text>{\" \"}\n                    {allAnswersMapped ? (\n                      <div className=\"text-center\">\n                        {\" \"}\n                        <p className=\"choices\">Here are the choices:</p>{\" \"}\n                        {allAnswersMapped}\n                      </div>\n                    ) : (\n                      <></>\n                    )}\n                  </Form.Group>{\" \"}\n                  <div className=\"text-center\">\n                    <Button\n                      className=\"button submit-btn\"\n                      variant=\"primary\"\n                      type=\"submit\"\n                    >\n                      Submit\n                    </Button>\n                  </div>\n                </Form>\n                <br />\n                <div>\n                  {!hint ? (\n                    <div className=\"text-center\">\n                      {\" \"}\n                      <Button\n                        onClick={this.handleHint}\n                        className=\"button\"\n                        variant=\"warning\"\n                        type=\"submit\"\n                      >\n                        Need a Hint? (50 points)\n                      </Button>\n                    </div>\n                  ) : (\n                    <Hint currentQuestion={currentQuestion} />\n                  )}\n                </div>\n              </>\n            ) : (\n              <Summary\n                status={true}\n                userAnswers={userAnswers}\n                points={points}\n                triviaQuestions={triviaQuestions}\n                playerName={playerName}\n              />\n            )}\n          </Jumbotron>\n        )}\n      </>\n    );\n  }\n}\nexport default Question;\n","import React, { Component } from \"react\";\n// import Points from \"../../components/Points/Points\";\nimport Question from \"../../components/Question/Question\";\n\nclass Game extends Component {\n  state = {\n    currentQuestionNumber: 0,\n  };\n\n  nextQuestion = () => {\n    this.setState((currentState) => {\n      return {\n        currentQuestionNumber: currentState.currentQuestionNumber + 1,\n      };\n    });\n  };\n\n  render() {\n    const { triviaQuestions, playerName } = this.props;\n    const { currentQuestionNumber } = this.state;\n    const currentQuestion = triviaQuestions[currentQuestionNumber];\n    let allAnswers;\n    let allAnswersMapped;\n\n    if (currentQuestion) {\n      allAnswers = [...currentQuestion.incorrect_answers];\n      const randomPosition = Math.floor(\n        Math.random() * (allAnswers.length + 1)\n      );\n      allAnswers.splice(randomPosition, 0, currentQuestion.correct_answer);\n      allAnswersMapped = allAnswers.map((answer) => (\n        <p\n          className=\"choices\"\n          key={answer}\n          dangerouslySetInnerHTML={{\n            __html: answer,\n          }}\n        ></p>\n      ));\n    }\n    return (\n      <div>\n        <Question\n          currentQuestionNumber={currentQuestionNumber}\n          triviaQuestions={triviaQuestions}\n          playerName={playerName}\n          allAnswersMapped={allAnswersMapped}\n          handleNextQuestion={this.nextQuestion}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\n\nexport default class NoMatch extends Component {\n  render() {\n    return (\n      <h3>Sorry, there's nothing found at: {this.props.location.pathname}</h3>\n    );\n  }\n}\n","import { Switch, Route } from \"react-router-dom\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Landing from \"./pages/Landing/Landing\";\nimport Game from \"./pages/Game/Game\";\nimport Summary from \"./components/Summary/Summary\";\nimport NoMatch from \"./components/NoMatch/NoMatch\";\n\nclass App extends Component {\n  state = {\n    questions: {},\n    playerName: \"\",\n  };\n\n  handleNameChange = (playerName) => {\n    this.setState({\n      playerName: playerName,\n    });\n  };\n\n  componentDidMount() {\n    fetch(\"https://opentdb.com/api.php?amount=15\")\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"data\", data.results);\n        this.setState({\n          // state :question has the array of 15 results from API\n          questions: data.results,\n        });\n      })\n      .catch((error) => console.log(error));\n  }\n  render() {\n    const { questions, playerName } = this.state;\n    console.log(playerName);\n    return (\n      <main>\n        <Switch>\n          <Route exact path=\"/\">\n            <Landing\n              handleNameChange={this.handleNameChange}\n              playerName={playerName}\n            />\n          </Route>\n          <Route exact path=\"/game\">\n            <Game triviaQuestions={questions} playerName={playerName} />\n          </Route>\n          {/* <Route exact path=\"/points\">\n          <Points />\n        </Route> */}\n          <Route exact path=\"/summary\">\n            <Summary playerName={playerName} />\n          </Route>\n          <Route path=\"*\" component={NoMatch} />\n        </Switch>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}